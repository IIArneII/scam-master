// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// InitHandlerFunc turns a function with the right signature into a init handler
type InitHandlerFunc func(InitParams) InitResponder

// Handle executing the request and returning a response
func (fn InitHandlerFunc) Handle(params InitParams) InitResponder {
	return fn(params)
}

// InitHandler interface for that can handle valid init params
type InitHandler interface {
	Handle(InitParams) InitResponder
}

// NewInit creates a new http.Handler for the init operation
func NewInit(ctx *middleware.Context, handler InitHandler) *Init {
	return &Init{Context: ctx, Handler: handler}
}

/*
	Init swagger:route POST /init-transaction Transactions init

# Init transaction

Initialize funds transfer from card to card.
*/
type Init struct {
	Context *middleware.Context
	Handler InitHandler
}

func (o *Init) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewInitParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
