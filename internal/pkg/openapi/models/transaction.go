// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction transaction
//
// swagger:model Transaction
type Transaction struct {

	// Amount in kopecks (RUB * 10^2)
	// Required: true
	// Minimum: 1
	Amount *int64 `json:"amount"`

	// The bank through which the funds will be transferred
	// Required: true
	// Enum: [tinkoff]
	BankGateway *string `json:"bankGateway"`

	// cvc
	// Example: 111
	// Required: true
	// Pattern: ^\d{3}$
	Cvc *string `json:"cvc"`

	// recipient card number
	// Example: 1111111111111111
	// Required: true
	// Pattern: ^\d{16}$
	RecipientCardNumber *string `json:"recipientCardNumber"`

	// Sender's card bank
	// Required: true
	// Enum: [tinkoff]
	SenderBank *string `json:"senderBank"`

	// sender card number
	// Example: 1111111111111111
	// Required: true
	// Pattern: ^\d{16}$
	SenderCardNumber *string `json:"senderCardNumber"`

	// transaction ID
	// Required: true
	TransactionID *string `json:"transactionID"`

	// validity
	// Example: 0101
	// Required: true
	// Pattern: ^\d{4}$
	Validity *string `json:"validity"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Transaction) UnmarshalJSON(data []byte) error {
	var props struct {

		// Amount in kopecks (RUB * 10^2)
		// Required: true
		// Minimum: 1
		Amount *int64 `json:"amount"`

		// The bank through which the funds will be transferred
		// Required: true
		// Enum: [tinkoff]
		BankGateway *string `json:"bankGateway"`

		// cvc
		// Example: 111
		// Required: true
		// Pattern: ^\d{3}$
		Cvc *string `json:"cvc"`

		// recipient card number
		// Example: 1111111111111111
		// Required: true
		// Pattern: ^\d{16}$
		RecipientCardNumber *string `json:"recipientCardNumber"`

		// Sender's card bank
		// Required: true
		// Enum: [tinkoff]
		SenderBank *string `json:"senderBank"`

		// sender card number
		// Example: 1111111111111111
		// Required: true
		// Pattern: ^\d{16}$
		SenderCardNumber *string `json:"senderCardNumber"`

		// transaction ID
		// Required: true
		TransactionID *string `json:"transactionID"`

		// validity
		// Example: 0101
		// Required: true
		// Pattern: ^\d{4}$
		Validity *string `json:"validity"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Amount = props.Amount
	m.BankGateway = props.BankGateway
	m.Cvc = props.Cvc
	m.RecipientCardNumber = props.RecipientCardNumber
	m.SenderBank = props.SenderBank
	m.SenderCardNumber = props.SenderCardNumber
	m.TransactionID = props.TransactionID
	m.Validity = props.Validity
	return nil
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientCardNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderBank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderCardNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.MinimumInt("amount", "body", *m.Amount, 1, false); err != nil {
		return err
	}

	return nil
}

var transactionTypeBankGatewayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tinkoff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeBankGatewayPropEnum = append(transactionTypeBankGatewayPropEnum, v)
	}
}

const (

	// TransactionBankGatewayTinkoff captures enum value "tinkoff"
	TransactionBankGatewayTinkoff string = "tinkoff"
)

// prop value enum
func (m *Transaction) validateBankGatewayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transactionTypeBankGatewayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateBankGateway(formats strfmt.Registry) error {

	if err := validate.Required("bankGateway", "body", m.BankGateway); err != nil {
		return err
	}

	// value enum
	if err := m.validateBankGatewayEnum("bankGateway", "body", *m.BankGateway); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateCvc(formats strfmt.Registry) error {

	if err := validate.Required("cvc", "body", m.Cvc); err != nil {
		return err
	}

	if err := validate.Pattern("cvc", "body", *m.Cvc, `^\d{3}$`); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateRecipientCardNumber(formats strfmt.Registry) error {

	if err := validate.Required("recipientCardNumber", "body", m.RecipientCardNumber); err != nil {
		return err
	}

	if err := validate.Pattern("recipientCardNumber", "body", *m.RecipientCardNumber, `^\d{16}$`); err != nil {
		return err
	}

	return nil
}

var transactionTypeSenderBankPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tinkoff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeSenderBankPropEnum = append(transactionTypeSenderBankPropEnum, v)
	}
}

const (

	// TransactionSenderBankTinkoff captures enum value "tinkoff"
	TransactionSenderBankTinkoff string = "tinkoff"
)

// prop value enum
func (m *Transaction) validateSenderBankEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transactionTypeSenderBankPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateSenderBank(formats strfmt.Registry) error {

	if err := validate.Required("senderBank", "body", m.SenderBank); err != nil {
		return err
	}

	// value enum
	if err := m.validateSenderBankEnum("senderBank", "body", *m.SenderBank); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateSenderCardNumber(formats strfmt.Registry) error {

	if err := validate.Required("senderCardNumber", "body", m.SenderCardNumber); err != nil {
		return err
	}

	if err := validate.Pattern("senderCardNumber", "body", *m.SenderCardNumber, `^\d{16}$`); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transactionID", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateValidity(formats strfmt.Registry) error {

	if err := validate.Required("validity", "body", m.Validity); err != nil {
		return err
	}

	if err := validate.Pattern("validity", "body", *m.Validity, `^\d{4}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transaction based on context it is used
func (m *Transaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
